#!/bin/bash
vers="0.1 Beta"

deltemp () {
rm -rf /tmp/filelist.tmp >/dev/null 2>&1
rm -rf /tmp/artist.tmp >/dev/null 2>&1
rm -rf /tmp/song.tmp >/dev/null 2>&1
rm -rf /tmp/flacsplit.tmp >/dev/null 2>&1
rm -rf /tmp/log.tmp >/dev/null 2>&1
rm -rf "$logfile" >/dev/null 2>&1
}

#Colours
green='\033[92m'
yellow='\e[0;33m'
orange='\e[38;5;166m'
cyan='\e[0;36m'
red='\e[0;31m'
white='\e[0;37m'

logfile="/tmp/failedsaf.log"
splitfl () {
cuebreakpoints "$cfls" | sed s/$/0/ | shnsplit -o "$outconv" "$flacname" -d "$rddr" 2>&1 | tee -a /tmp/log.tmp >/dev/null 2>&1
# read splitedfiles
cntdp=$(find "$rddr" -type f -name "split-track*.$outconv" | sort  > /tmp/splitedfiles.tmp)
cntsp=$(wc -l /tmp/splitedfiles.tmp | awk '{print$1}' )
for i in $(seq "$cntsp")
do
fl=$(sed -n "${i}p" /tmp/splitedfiles.tmp)
flname=$(sed -n "${i}p" /tmp/flacsplit.tmp | sed 's/?//;s/\^//;s/"//;s/*//;s/%//;s/<//;s/>//;s/#//')
cp "$fl" "$rddr/$i.$outconv"
mv "$fl" "$rddr/$flname.$outconv" 
if [[ -f "$rddr/$flname.$outconv" ]]
then
rm -rf "$rddr/$i.$outconv"
fi 
done
mv "$flacname" "$rddr/tmp.file"
cflac=$(find "$rddr" -type f -name "*.$outconv" | wc -l | awk '{print$1}')
cntconv=$(wc -l /tmp/flacsplit.tmp | awk '{print$1}')
if [[ "$cflac" == "$cntconv" ]]
then
echo -e "$green""--Completed--"
echo -e "$green""Splitted$white $cntconv$green files from$white $flacname"
echo ""
else
echo -e "$red""Number of files splited does not match the number of tracks in cue file"
echo -e "$white""Possible reason is special characters in tracks names that are not allowed to be written as file name in linux"
rfl="0"
echo -e "$white""Original file was not deleted in case you used -r switch before"
echo "$flacname" >> "$logfile"
fi
mv "$rddr/tmp.file" "$flacname"
if [[ "$rfl" == "1" ]]
then
rm "$flacname"
fi

}

crtfl () {
# create a file with artist and song to rename splited files after
cntart=$(wc -l /tmp/song.tmp | awk '{print$1}')
rm -rf /tmp/flacsplit.tmp >/dev/null 2>&1
if [[ "$cntart" -gt "1" ]]
then
for i in $(seq "$cntart")
do
art=$(sed -n "${i}p" /tmp/artist.tmp )
sngs=$(sed -n "${i}p" /tmp/song.tmp )
if [[ ! -f "/tmp/flacsplit.tmp" ]]
then
if [[ -z "$art" ]]
then
art=$(sed -n 1p /tmp/artist.tmp)
if [[ -z "$art" ]]
then
art=$(cueprint "$cfls" | grep "performer:" | sed 's/performer://;s///;s/"//g;s/^ *//;s/\s*$//;/^$/d;s/^[ \t]*//' | tr '\\/' '-')
if [[ -z "$art" ]]
then
art="Unknow Artist"
fi
fi
fi
if [[ -z "$sngs" ]]
then
sngs="Track-$i"
fi
echo "$i - $art - $sngs" > "/tmp/flacsplit.tmp"
else
if [[ -z "$art" ]]
then
art=$(sed -n 1p /tmp/artist.tmp)
if [[ -z "$art" ]]
then
art=$(cueprint "$cfls" | grep "performer:" | sed 's/performer://;s///;s/"//g;s/â€™//g;s/^ *//;s/\s*$//;/^$/d;s/^[ \t]*//' | tr '\\/' '-')
if [[ -z "$art" ]]
then
art="Unknow Artist"
fi
fi
fi
if [[ -z "$sngs" ]]
then
sngs="Track-$i"
fi
echo "$i - $art - $sngs" >> "/tmp/flacsplit.tmp"
fi
done
fi

}
function help () {
echo -e "$green""Split Audio File $vers"
echo -e "$yellow""-------------------------"
echo -e "$white""options :"
echo -e "$white""-i $orange(Input Directory)"
echo -e "$white""-f $orange(File to split (*.wav,*.ape,*.flac,*.wv,*.alac)"
echo -e "$white""-w $orange(Output conversion (wav,ape,flac,wv,alac,mp3)"
echo -e "$white""-t $orange(Test artist and song name extraction first before writing)"
echo -e "$white""-r $orange(Remove Original File after split and conversion)"
echo ""
echo -e "$green""Example 1 :$white saf -i /my_audio_folder -f *.ape -w flac"
echo -e "$green""Example 2 :$white saf -i /my_audio_folder -f *.flac -w flac -r"
echo -e "$green""Example 3 :$white saf -i /my_audio_folder -f *.wav -w flac -t"
exit 0
	
}
function depedency () {
echo -ne "$green""Checking Dependencies ...."
# Requires cueprint	
which cueprint > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
      echo -e "$red""Error"
      echo -e "$green""Cueprint Missing"
      echo ""
echo -e "$white""Try : apt install cuetools"
exit 1
fi 
 which shnsplit > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
      echo -e "$red""Error"
      echo "$green""Shnsplit Missing"
      echo ""
echo -e "$white""Try : apt install shntool"
exit 1
fi
chkwvpk=$(apt-cache policy wavpack | grep "Installed" | awk '{print$2}')
if [[ "$chkwvpk" == "(none)" ]]
then
      echo -e "$red""Error"
      echo -e "$green""Wavpack Missing"
      echo ""
echo -e "$white""Try : apt install wavpack"
exit 1
fi
chklm=$(apt-cache policy lame | grep "Installed" | awk '{print$2}')
if [[ "$chklm" == "(none)" ]]
then
      echo -e "$red""Error"
      echo -e "$green""Lame Missing"
      echo ""
      echo -e "$white""Try : apt install lame"
exit 1
fi
chkffmpg=$(apt-cache policy ffmpeg | grep "Installed" | awk '{print$2}')
if [[ "$chkffmpg" == "(none)" ]]
then
echo -e "$red""Error"
      echo -e "$green""Ffmpeg Missing"
      echo ""
echo -e "$white""Try : apt install ffmpeg"
exit 1
fi
chkmka=$(apt-cache policy monkeys-audio | grep "Installed" | awk '{print$2}')
if [[ "$chkmka" == "(none)" ]]
then
chkarch=$(uname -m | awk '{print$1}')
if [[ "$chkarch" == "X86_64" ]]
then
echo -e "$red""Error"
echo ""
echo -ne "$green""Installing Monkeys Audio ..."
cd tools/ && dpkg -i *amd64.deb 
else
echo -e "$red""Error"
echo -ne "$green""Installing Monkeys Audio ..."
cd tools/ && dpkg -i *i386.deb 
fi
chkmka=$(apt-cache policy monkeys-audio | grep "Installed" | awk '{print$2}')
if [[ "$chkmka" == "(none)" ]]
then
echo -e "$red""Error"
      echo -e "$white""There was an error installing monkeys audio packages from tools folder"
      echo "Are you Root ?"
      echo "Try executing this script as sudo"
exit 1
else
echo -e "$green""Done"
fi
fi
chklm8=$(apt-cache policy libmac8 | grep "Installed" | awk '{print$2}')
if [[ "$chklm8" == "(none)" ]]
then
chkarch=$(uname -m | awk '{print$1}')
if [[ "$chkarch" == "X86_64" ]]
then
echo -e "$red""Error"
echo -ne "$green""Installing Libmac (Monkeys Audio) ..."
cd tools/ && dpkg -i libmac8_6.37-dmo1_amd64.deb 
else
echo -e "$red""Error"
echo -ne "$green""Installing Libmac (Monkeys Audio) ..."
cd tools/ && dpkg -i libmac8_6.37-dmo1_i386.deb 
fi
chklm8=$(apt-cache policy libmac8 | grep "Installed" | awk '{print$2}')
if [[ "$chklm8" == "(none)" ]]
then
echo -e "red""Error"
      echo -e "$white""There was an error installing Libmac8 audio packages from tools folder"
      echo "Are you Root ?"
      echo "Try executing this script as sudo"
exit 1
else
echo "$green""Done"
fi
fi
chklbc=$(apt-cache policy libc-bin | grep "Installed" | awk '{print$2}')
if [[ "$chklm" == "(none)" ]]
then
      echo -e "$red""Error"
      echo -e "$green""Iconv Missing"
      echo ""
      echo -e "$white""Try : apt install libc-bin"
exit 1
fi
echo "Done"
}
clear
var="$@"
swt=$(echo "$var" | grep -w "\-t")
if [[ ! -z "$swt" ]]
then
tst="1"
else 
tst="0"
fi

rfl=$(echo "$var" | grep -w "\-r")
if [[ ! -z "$rfl" ]]
then
rfl="1"
else 
rfl="0"
fi

if [[ -z "$var" ]]
then
depedency
help
fi
echo -e "$green""---------- Split Audio File $vers -----------"
depedency

# Check for input directory to search for files
inp=$(echo "$var" | grep -oP '(?<=-i )[^ ]*')
if [[ -z "$inp" ]]
then
echo -e "$white""-No Input Directory was provided"
exit 0
else
if [[ ! -d "$inp" ]]
then
echo -e "$white""-Input Directory :$red $inp$white (Does not Exist)"
exit 0
fi
fi

# Check if cue files exist in that directory before proceeding
chk=$(find "$inp" -type f -name "*.cue")
if [[ -z "$chk" ]]
then
echo -e "$white""-No Cue files were found in Input Directory"
exit 0
fi


flext=$(echo "$var" | grep -oP '(?<=-f )[^ ]*')
if [[ -z "$flext" ]]
then
echo -e "$white""-No File Extension was provided to split"
echo -e "$green""Options :$white *.ape *.alac *.wv *.wav *.flac$green with the switch -f"
echo -e "$white""SAF will split only the folder/s with specified file extension provided"
exit 0
else
if [ "$flext" != "*.ape" ] && [ "$flext" != "*.alac" ] && [ "$flext" != "*.wv" ] && [ "$flext" != "*.wav" ] && [ "$flext" != "*.flac" ]; then
echo -e "$white""-The Files Extension provided is not valid$red ($flext)"
echo -e "$green""Available extensions to split :$white *.flac|*.wav|*.wv*|.ape|*.alac"
exit 0
fi
fi

# Check if in input directory exists the files that user want to split
# By default this tool does not split automatically all the superted files at same time
# If in a directory exists multiples subfolder with multiples big files with different extensions
# then the user must choose each file extension 1 by one
# this means that if user selects *.wv , then all folders containing *.wv files will be the only
# ones processed , same applies to other files extension

chkfl=$(find "$inp" -type f -name "$flext")
if [[ -z "$chkfl" ]]
then
echo -e "$white""-No files with$green ($flext)$white were found in$cyan $inp"
echo -e "$white""Make sure you check first the file extension to split."
exit 0
fi 

# Output conversion after spliting the big file

outconv=$(echo "$var" | grep -oP '(?<=-w )[^ ]*')
if [[ -z "$outconv" ]]
then
echo -e "$white""-No Output conversion was provided"
echo -e "$green""Options : ($white ape alac wv wav flac mp3$green ) with the switch$green -w"
exit 0
else
if [ "$outconv" != "ape" ] && [ "$outconv" != "alac" ] && [ "$outconv" != "wv" ] && [ "$outconv" != "wav" ] && [ "$outconv" != "flac" ] && [ "$outconv" != "mp3" ]; then
echo -e "$white""-The Output Conversion is not valid ($outconv)"
exit 0
fi
fi
echo ""
echo -e "$white""Input Directory :$green $inp"
echo -e "$white""Files to Split :$green $flext"
echo -e "$white""Will be splited and converted to :$green $outconv"

# -o switch means that if user wants the new files stored in a different location then this must be used
# otherwise splited files will be stored at same directory as big file to be splited were found

deltemp

# Find every cue file in desired input directory
find "$inp" -type f -name "*.cue"  | sed -r 's|/[^/]+$||' | sort -u | uniq > /tmp/filelist.tmp

function begin () {
rm /tmp/log.tmp >/dev/null 2>&1
cflac=$(find "$rddr" -type f -name "$flext" | wc -l | awk '{print$1}')
if [[ "$cflac" == "1" ]]
then
flacname=$(find "$rddr" -type f -name "$flext")

rm /tmp/artist.tmp >/dev/null 2>&1
rm /tmp/song.tmp >/dev/null 2>&1

# Check if cue file is encoded in UTF-8 , if not then convert it

chkutf=$(iconv -f utf-8 "$cfls" -t utf-8 2>&1 >/dev/null )
if [[ ! -z "$chkutf" ]]
then
chkenc=$(file -bi "$cfls" | awk '{print$2}' | sed 's/charset=//g')
iconv -f "$chkenc" -t utf-8 "$cfls" -o "$rddr/tmp.cue" | tee -a /tmp/log.tmp

if [[ ! -f "$rddr/tmp.cue" ]]
then
echo "Iconv Error : $cfls" >> "$logfile"
else
rm -rf "$cfls" >/dev/null 2>&1
mv "$rddr/tmp.cue" "$cfls" >/dev/null 2>&1
chkutf=$(iconv -f utf-8 "$cfls" -t utf-8 2>&1 >/dev/null )
if [[ ! -z "$chkutf" ]]
then
echo -e "$red""Error:$greenCue file :$cyan $cfls$green is not UTF8 Encoding"
echo "Not UTF-8 Encoding : $cfls" >> "$logfile"
else
# Starting Cueprint Processing and removing special characters from words that may give error in output filename
cueprint "$cfls" 2>&1 | tee -a /tmp/log.tmp | grep "perfomer:" | sed 's/perfomer://;s///;s/"//g;s/^ *//;s/\s*$//;/^$/d;s/^[ \t]*//' | sed "s/'//g;s/Ã©/e/g;s/Ã³/o/g;s/Ã¡/a/g" | tr '\\/' '-' |  tr '\"/' ' '  > /tmp/artist.tmp 
cueprint "$cfls" 2>&1 | tee -a /tmp/log.tmp | grep "title:" | sed 1d | sed 's/title://;s///;s/"//g;s/^ *//;s/\s*$//;/^$/d;s/^[ \t]*//' | sed "s/'//g;s/Ã©/e/g;s/Ã³/o/g;s/Ã¡/a/g" | tr '\\/' '-' | tr '\"/' ' ' > /tmp/song.tmp   
chkerror=$(grep -w "\<unable to parse input\>" < /tmp/log.tmp)
if [[ ! -z "$chkerror" ]]
then
echo -e "$red""-Unable to parse :$white $cfls$red with$cyan cueprint"
echo "$cfls" >> "$logfile"
else
chkbc=$(grep -w "\<bad character\>" < /tmp/log.tmp)
if [[ ! -z "$chkbc" ]]
then
echo -e "$white""Cueprint Error :$red Bad Characters" 
echo -e "$white""File:$red $cfls"
echo ""
echo "$cfls" >> "$logfile"
else
crtfl
if [[ "$tst" == "0" ]]
then
echo -ne "$green""Processing : "
echo -ne "$white""$cfls ..."
cntflnm=$(wc -l /tmp/song.tmp | awk '{print$1}')
if [[ "$cntflnm" == "1" ]]
then
echo "$rddr : Unsupported (single file Cue)" >> "$logfile"
echo -e "$red""Unsupported$white"
else
splitfl
fi
else
echo -e "$green""Artist and song name extracted from :$orange $cfls"
echo -e "$cyan""-------------------------------------------$white"
cat /tmp/flacsplit.tmp
echo -e "$cyan""-------------------------------------------$white"
exit 0
fi
fi
fi
fi
fi
fi
fi
}	
# Count How many directories to be processed
cntdir=$(wc -l /tmp/filelist.tmp | awk '{print$1}')
function count () {
if [[ "$i" -gt "$cntdir" ]]
then
echo -e "$white""Finished Processing / No Files to be processed"
exit 0
fi	
for i in $(seq "$cntdir")
# 
do
rddr=$(sed -n "${i}p" /tmp/filelist.tmp)
#look for 2 cue files
cfls=$(find "$rddr" -type f -name "*.cue" | wc -l | awk '{print$1}')
if [[ "$cfls" -gt "1" ]]
then
cfls=$(find "$rddr" -type f -name "*.cue" | sed -n 1p)
else
cfls=$(find "$rddr" -type f -name "*.cue")
fi

# count input files on dir , if more that 1 than audio file will not be precessed
# This means that directory was already processed before or do not need to be processed
audiocnt=$(find "$rddr" -type f \( -iname \*.flac -o -iname \*.wav -o -iname \*.wv -o -iname \*.alac -o -iname \*.ape -o -iname \*.mp3 \) | wc -l)
if [[ "$audiocnt" -gt "1" ]]
then
echo -e "$white""-Directory$green $rddr$white already processed "
echo ""
else
begin
fi

done
}
count
if [[ -f "$logfile" ]]
then
echo -e "$green""Failed Files to be processed"
echo -e "$orange"".................................$white"
cat $logfile
echo -e "$orange"".................................$white"
echo -e "$white""       Possible Reasons"
echo -e "$green""Cue file error reading :$white"
echo "-Check for a double cote missing or multiple double cotes on same line"
echo "-Check if exists an empty line at the end of the file"
echo "-Check if instead WAV it is WAVE after filename field inside cue file"
echo "-Check if file format encoding is UTF-8"
echo -e "$orange""Note:$white This tool is unable to process cue files with 1 audio file only"
echo ""
echo -e "$green""Audio file Split Error :$white"
echo "-Check if Audio file is 44Khz/16bit"
echo -e "$orange"".................................$white"
fi

